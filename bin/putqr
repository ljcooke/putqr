#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'putqr'

def print_version
  puts "putqr #{PutQR::VERSION} (#{PutQR::DATE})"
end

# rubocop:disable Metrics/MethodLength
def parse_options
  {}.tap do |options|
    OptionParser.new do |opts|
      opts.banner = 'Usage: putqr [options] [message]'

      opts.on('--[no-]image',
              'display as an image (on by default if supported)') do |image|
        options[:image] = image
      end

      opts.on('--version',
              'print the version') do
        print_version
        exit
      end
    end.parse!
  end
end
# rubocop:enable Metrics/MethodLength

def parse_arguments
  if ARGV.any?
    STDERR.puts 'warning: only encoding first message argument' if ARGV.size > 1
    ARGV.first
  else
    STDIN.read.chomp
  end
end

def render(message, options)
  qrcode = PutQR::QRCode.new(message)

  case options[:image]
  when true then qrcode.render_image
  when false then qrcode.render_ansi
  else qrcode.render
  end
end

options = parse_options
message = parse_arguments
output = render(message, options)

exit(1) if output.nil?
puts output
